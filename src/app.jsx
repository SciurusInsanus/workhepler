import React, { useState } from 'react';

function FormParser() {
  const [input, setInput] = useState("");
  const [outputs, setOutputs] = useState({ tableRow: "", directorMsg: "", tableCopy: "" });

  function parseForm(text) {
    function extract(regex) {
      const match = text.match(regex);
      return match ? match[1].trim() : "";
    }

    const data = {
      email: extract(/–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:\s*(.+)/),
      rules_agreement: extract(/–æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è.*—Å –Ω–∏–º–∏:\s*(.+)/),
      full_name: extract(/–í–∞—à–µ –§–ò–û:\s*(.+)/),
      phone: extract(/–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\s*(.+)/),
      animal_type: extract(/–í–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ:\s*(.+)/),
      animal_count: extract(/–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö.*:\s*(.+)/),
      health_status: extract(/–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è.*:\s*(.+)/),
      shelter_name: extract(/–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏—é—Ç–∞.*:\s*(.+)/),
      pickup_address: extract(/–º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ:\s*(.+)/),
      destination_address: extract(/–ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:\s*(.+)/),
      return_needed: extract(/–ü–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞.*:\s*(.+)/),
      trip_date: extract(/–î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏[^\d]*(\d{4}-\d{2}-\d{2})/),
      pickup_time: extract(/–ø–æ–¥–∞—á–∞\s*([0-9:]+)/),
      arrival_time: extract(/–ø—Ä–∏–µ–º\s*([0-9:]+)/),
      trip_purpose: extract(/–¶–µ–ª—å –ø–æ–µ–∑–¥–∫–∏:\s*(.+)/),
      car_reaction: extract(/–ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –ø–æ–µ–∑–¥–∫—É.*:\s*(.+)/),
      socialization: extract(/—Å—Ç–µ–ø–µ–Ω—å —Å–æ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.*:\s*(.+)/),
      responsibility_agreement: extract(/—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é.*:\s*(–î–∞|–ù–µ—Ç)/),
      data_policy_agreement: extract(/—Å–æ–≥–ª–∞—Å–∏–µ.*:\s*(–î–∞|–ù–µ—Ç)/),
    };

    const tableRow = [
      data.trip_date,
      data.email,
      data.rules_agreement,
      data.full_name,
      data.phone,
      data.animal_type,
      data.animal_count,
      data.health_status,
      data.shelter_name,
      `${data.full_name}, ${data.phone}`,
      data.pickup_address,
      data.destination_address,
      `–ø–æ–¥–∞—á–∞ ${data.pickup_time}, –ø—Ä–∏–µ–º ${data.arrival_time}`,
      data.trip_purpose,
      data.car_reaction,
      data.socialization,
      data.responsibility_agreement,
      data.data_policy_agreement,
      data.return_needed
    ].join("\t");

    const directorMsg = `–ö–∞—Ç—è, –ø–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ ${data.trip_date}\n–ê–¥—Ä–µ—Å –ø–æ–¥–∞—á–∏: ${data.pickup_address}\n–í–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ: ${data.animal_type}\n–ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: ${data.destination_address}\n–¶–µ–ª—å –ø–æ–µ–∑–¥–∫–∏: ${data.trip_purpose}\n–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: ${data.pickup_time}\n–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: ${data.arrival_time}\n–ü–æ–µ–∑–¥–∫–∞ —Ç—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ: ${data.return_needed}\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n–ö—É—Ä–∞—Ç–æ—Ä - ${data.full_name}`;

    const tableCopy = `–î–∞—Ç–∞: ${data.trip_date.split('-').reverse().join('.')}\n–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: ${data.pickup_time}\n–ê–¥—Ä–µ—Å –ø–æ–¥–∞—á–∏: ${data.pickup_address}\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ, —Ç–µ–ª.: ${data.phone}, ${data.full_name}\n–í–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ: ${data.animal_type}\n\n–ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: ${data.destination_address}\n–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: ${data.arrival_time}\n–û—Å–æ–±—ã–µ –æ—Ç–º–µ—Ç–∫–∏: –ü–æ–µ–∑–¥–∫–∞ —Ç—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ: ${data.return_needed}\n${data.socialization}`;

    setOutputs({ tableRow, directorMsg, tableCopy });
  }

  function copyToClipboard(text) {
    navigator.clipboard.writeText(text).then(() => {
      alert("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!");
    });
  }

  return (
    <div className="p-6 space-y-6">
      <textarea
        value={input}
        onChange={(e) => setInput(e.target.value)}
        placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏"
        rows={12}
        style={{ width: "100%", padding: "10px" }}
      />
      <button
        onClick={() => parseForm(input)}
        style={{ padding: "10px 20px", cursor: "pointer", marginTop: "10px" }}
      >
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞—è–≤–∫—É
      </button>

      <div>
        <h3 className="font-semibold">–¢–∞–±–ª–∏—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞:</h3>
        <textarea value={outputs.tableRow} readOnly rows={3} style={{ width: "100%", padding: "10px" }} />
        <button onClick={() => copyToClipboard(outputs.tableRow)} style={{ marginTop: "5px" }}>üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
      </div>

      <div>
        <h3 className="font-semibold">–°–æ–æ–±—â–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É:</h3>
        <textarea value={outputs.directorMsg} readOnly rows={8} style={{ width: "100%", padding: "10px" }} />
        <button onClick={() => copyToClipboard(outputs.directorMsg)} style={{ marginTop: "5px" }}>üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
      </div>

      <div>
        <h3 className="font-semibold">–ó–∞—è–≤–∫–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã:</h3>
        <textarea value={outputs.tableCopy} readOnly rows={8} style={{ width: "100%", padding: "10px" }} />
        <button onClick={() => copyToClipboard(outputs.tableCopy)} style={{ marginTop: "5px" }}>üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
      </div>
    </div>
  );
}

export default FormParser;
