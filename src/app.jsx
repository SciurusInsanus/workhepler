import React, { useState } from 'react';
import * as XLSX from "xlsx";
import { saveAs } from "file-saver";

function FormParser() {
  const [input, setInput] = useState("");
  const [outputs, setOutputs] = useState({ tableRow: "", directorMsg: "", tableCopy: "" });
  const [data, setData] = useState({});
  const [manualPickupTime, setManualPickupTime] = useState("");
  const [manualArrivalTime, setManualArrivalTime] = useState("");

  function parseForm(text) {
    function extract(regex) {
      const match = text.match(regex);
      return match ? match[1].trim() : "";
    }

    const extractedData = {
      email: extract(/–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:\s*(.+)/),
      rules_agreement: extract(/–æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è.*—Å –Ω–∏–º–∏:\s*(.+)/),
      full_name: extract(/–í–∞—à–µ –§–ò–û:\s*(.+)/),
      phone: extract(/–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\s*(.+)/),
      animal_type: extract(/–í–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ:\s*(.+)/),
      animal_count: extract(/–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö.*:\s*(.+)/),
      health_status: extract(/–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è.*:\s*(.+)/),
      shelter_name: extract(/–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏—é—Ç–∞.*:\s*(.+)/),
      pickup_address: extract(/–º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ:\s*(.+)/),
      destination_address: extract(/–ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:\s*(.+)/),
      return_needed: extract(/–ü–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞.*:\s*(.+)/),
      trip_date: extract(/–î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏[^\d]*(\d{4}-\d{2}-\d{2})/),
      pickup_time: manualPickupTime || extract(/–ø–æ–¥–∞—á–∞\s*([0-9:]+)/),
      arrival_time: manualArrivalTime || extract(/–ø—Ä–∏–µ–º\s*([0-9:]+)/),
      trip_purpose: extract(/–¶–µ–ª—å –ø–æ–µ–∑–¥–∫–∏:\s*(.+)/),
      car_reaction: extract(/–ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –ø–æ–µ–∑–¥–∫—É.*:\s*(.+)/),
      socialization: extract(/—Å—Ç–µ–ø–µ–Ω—å —Å–æ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.*:\s*(.+)/),
      responsibility_agreement: extract(/—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é.*:\s*(–î–∞|–ù–µ—Ç)/),
      data_policy_agreement: extract(/—Å–æ–≥–ª–∞—Å–∏–µ.*:\s*(–î–∞|–ù–µ—Ç)/),
    };

    setData(extractedData);
const today = new Date().toLocaleDateString("ru-RU");
    const tableRow = [
today,
      extractedData.trip_date,
      extractedData.email,
      extractedData.rules_agreement,
      extractedData.full_name,
      extractedData.phone,
      extractedData.animal_type,
      extractedData.animal_count,
      extractedData.health_status,
      extractedData.shelter_name,
      `${extractedData.full_name}, ${extractedData.phone}`,
      extractedData.pickup_address,
      extractedData.destination_address,
      `–ø–æ–¥–∞—á–∞ ${extractedData.pickup_time}, –ø—Ä–∏–µ–º ${extractedData.arrival_time}`,
      extractedData.trip_purpose,
      extractedData.car_reaction,
      extractedData.socialization,
      extractedData.responsibility_agreement,
      extractedData.data_policy_agreement,
      extractedData.return_needed
    ].join("\t");

    const isCat = extractedData.animal_type.toLowerCase().includes("–∫–æ—à–∫");
    const catCountLine = isCat && extractedData.animal_count
      ? `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—à–µ–∫: ${extractedData.animal_count}\n`
      : "";

    const directorMsg = `–ö–∞—Ç—è, –ø–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ ${extractedData.trip_date}\n–ê–¥—Ä–µ—Å –ø–æ–¥–∞—á–∏: ${extractedData.pickup_address}\n–í–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ: ${extractedData.animal_type}\n${catCountLine}–ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: ${extractedData.destination_address}\n–¶–µ–ª—å –ø–æ–µ–∑–¥–∫–∏: ${extractedData.trip_purpose}\n–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: ${extractedData.pickup_time}\n–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: ${extractedData.arrival_time}\n–ü–æ–µ–∑–¥–∫–∞ —Ç—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ: ${extractedData.return_needed}\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n–ö—É—Ä–∞—Ç–æ—Ä - ${extractedData.full_name}`;

    const tableCopy = `–î–∞—Ç–∞: ${extractedData.trip_date?.split('-').reverse().join('.')}\n–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: ${extractedData.pickup_time}\n–ê–¥—Ä–µ—Å –ø–æ–¥–∞—á–∏: ${extractedData.pickup_address}\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ, —Ç–µ–ª.: ${extractedData.phone}, ${extractedData.full_name}\n–í–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ: ${extractedData.animal_type}\n\n–ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: ${extractedData.destination_address}\n–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: ${extractedData.arrival_time}\n–û—Å–æ–±—ã–µ –æ—Ç–º–µ—Ç–∫–∏: ${extractedData.return_needed === "–î–∞" ? "–ü–æ–µ–∑–¥–∫–∞ —Ç—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ" : "–ü–æ–µ–∑–¥–∫–∞ –≤ –æ–¥–∏–Ω –∫–æ–Ω–µ—Ü"}\n${extractedData.socialization}`;

    setOutputs({ tableRow, directorMsg, tableCopy });
  }

  function copyToClipboard(text) {
    const textarea = document.createElement("textarea");
    textarea.value = text;
    textarea.style.position = "fixed";
    document.body.appendChild(textarea);
    textarea.focus();
    textarea.select();

    try {
      const successful = document.execCommand("copy");
      alert(successful ? "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!" : "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å.");
    } catch (err) {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏: " + err);
    }

    document.body.removeChild(textarea);
  }

  function generateExcel() {
    const tripDirection = data.return_needed === "–î–∞" ? "–ü–æ–µ–∑–¥–∫–∞ —Ç—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ" : "–ü–æ–µ–∑–¥–∫–∞ –≤ –æ–¥–∏–Ω –∫–æ–Ω–µ—Ü";

    const rows = [
      ["–î–∞—Ç–∞", data.trip_date?.split("-").reverse().join(".") || ""],
      ["–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏", data.pickup_time],
      ["–ê–¥—Ä–µ—Å –ø–æ–¥–∞—á–∏", data.pickup_address],
      ["–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ, —Ç–µ–ª.", `${data.phone}, ${data.full_name}`],
      ["–í–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ", data.animal_type],
      ["", ""],
      ["–ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è", data.destination_address],
      ["–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è", data.arrival_time],
      ["–û—Å–æ–±—ã–µ –æ—Ç–º–µ—Ç–∫–∏", `${tripDirection} \n${data.socialization}`],
      ["", ""],
      ["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è:", ""]
    ];

    const worksheet = XLSX.utils.aoa_to_sheet(rows);
    worksheet['!cols'] = [{ wch: 30 }, { wch: 60 }];

    rows.forEach((row, i) => {
      worksheet[`A${i + 1}`] = worksheet[`A${i + 1}`] || { t: "s", v: "" };
      worksheet[`B${i + 1}`] = worksheet[`B${i + 1}`] || { t: "s", v: "" };
      if (row[0]) worksheet[`A${i + 1}`].s = { font: { bold: true } };
      worksheet[`A${i + 1}`].s = Object.assign(worksheet[`A${i + 1}`].s || {}, { border: borderStyle });
      worksheet[`B${i + 1}`].s = { border: borderStyle };
      if (row[0] === "" && row[1] === "") {
        worksheet[`A${i + 1}`].s.fill = { fgColor: { rgb: "EDEDED" } };
        worksheet[`B${i + 1}`].s.fill = { fgColor: { rgb: "EDEDED" } };
      }
    });

    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "–ó–∞—è–≤–∫–∞");
    const excelBuffer = XLSX.write(workbook, { bookType: "xlsx", type: "array", cellStyles: true });
    const blob = new Blob([excelBuffer], { type: "application/octet-stream" });
    const fileName = `–ó–∞—è–≤–∫–∞_${(data.trip_date || "–¥–∞—Ç–∞").replace(/\./g, "-")}.xlsx`;
    saveAs(blob, fileName);
  }

  const borderStyle = {
    top: { style: "thin" },
    bottom: { style: "thin" },
    left: { style: "thin" },
    right: { style: "thin" }
  };

  return (
    <div className="p-6 space-y-6">
      <textarea
        value={input}
        onChange={(e) => setInput(e.target.value)}
        placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏"
        rows={12}
        style={{ width: "100%", padding: "10px" }}
      />

      <div style={{ display: "flex", gap: "1rem", alignItems: "center" }}>
        <div>
          <label>–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏:</label><br />
          <input
            type="time"
            value={manualPickupTime}
            onChange={(e) => setManualPickupTime(e.target.value)}
            style={{ padding: "5px" }}
          />
        </div>
        <div>
          <label>–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è:</label><br />
          <input
            type="time"
            value={manualArrivalTime}
            onChange={(e) => setManualArrivalTime(e.target.value)}
            style={{ padding: "5px" }}
          />
        </div>
      </div>

      <button
        onClick={() => parseForm(input)}
        style={{ padding: "10px 20px", cursor: "pointer", marginTop: "10px" }}
      >
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞—è–≤–∫—É
      </button>

      <div>
        <h3 className="font-semibold">–¢–∞–±–ª–∏—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞:</h3>
        <textarea value={outputs.tableRow} readOnly rows={3} style={{ width: "100%", padding: "10px" }} />
        <button onClick={() => copyToClipboard(outputs.tableRow)} style={{ marginTop: "5px" }}>üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
      </div>

      <div>
        <h3 className="font-semibold">–°–æ–æ–±—â–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É:</h3>
        <textarea value={outputs.directorMsg} readOnly rows={8} style={{ width: "100%", padding: "10px" }} />
        <button onClick={() => copyToClipboard(outputs.directorMsg)} style={{ marginTop: "5px" }}>üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
      </div>

      <div>
        <h3 className="font-semibold">–ó–∞—è–≤–∫–∞ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è:</h3>
        <textarea value={outputs.tableCopy} readOnly rows={8} style={{ width: "100%", padding: "10px" }} />
        <button onClick={generateExcel} style={{ marginTop: "5px" }}>üìÑ –°–∫–∞—á–∞—Ç—å –∫–∞–∫ Excel</button>
      </div>
    </div>
  );
}

export default FormParser;
